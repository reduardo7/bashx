#!/usr/bin/env bash

############################################
#                                          #
# BashX                                    #
#                                          #
# Extended Bash Framework                  #
#                                          #
# URL: https://github.com/reduardo7/bashx  #
#                                          #
# Author: Eduardo Daniel Cuomo             #
#         eduardo.cuomo.ar@gmail.com       #
#         reduardo7@gmail.com              #
#                                          #
############################################

export LC_CTYPE=C
export LC_ALL=C

SCRIPT_CALLED="$0"
SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_CALLED")" ; pwd)"
SCRIPT_FILE_NAME="$(basename "$SCRIPT_CALLED")"
while [ -h "$SCRIPT_CALLED" ]; do
  SCRIPT_CALLED="$(readlink "$SCRIPT_CALLED")"
  SCRIPT_DIR="$(cd "$SCRIPT_DIR" ; cd "$(dirname "$SCRIPT_CALLED")" ; pwd)"
  SCRIPT_FILE_NAME="$(basename "$SCRIPT_CALLED")"
  SCRIPT_CALLED="$(cd "$SCRIPT_DIR" ; pwd)/$SCRIPT_FILE_NAME"
done

# Test and force run with "bash" interpreter
if [ -z "$BASH" ]; then
  bash "$(basename "$SCRIPT_CALLED")" "$@"
  exit $?
fi

# #############################################################################

### Constants

export CURRENT_DIR="$(pwd)"
## Current user directory.
readonly CURRENT_DIR="$CURRENT_DIR"

export SCRIPT_CALLED="$SCRIPT_CALLED"
## Called script.
readonly SCRIPT_CALLED="$SCRIPT_CALLED"

export SCRIPT_FILE_NAME="$SCRIPT_FILE_NAME"
## Current script file name.
readonly SCRIPT_FILE_NAME="$SCRIPT_FILE_NAME"

export SCRIPT_FULL_PATH="$CURRENT_DIR/$SCRIPT_FILE_NAME"
## Current script full path.
readonly SCRIPT_FULL_PATH="$SCRIPT_FULL_PATH"

export SCRIPT_DIR="$SCRIPT_DIR"
## Current script directory.
readonly SCRIPT_DIR="$SCRIPT_DIR"

export BASHX_DIR="$HOME/.bashx/$BASHX_VERSION"
## Core directory.
readonly BASHX_DIR="$BASHX_DIR"

export BASHX_SRC_PATH="$BASHX_DIR/src"
## Core SRC path.
readonly BASHX_SRC_PATH="$BASHX_SRC_PATH"

export BASHX_ACTIONS_PATH="$BASHX_SRC_PATH/actions"
## Core actions path.
readonly BASHX_ACTIONS_PATH="$BASHX_ACTIONS_PATH"

export BASHX_UTILS_PATH="$BASHX_SRC_PATH/utils"
## Core utils path.
readonly BASHX_UTILS_PATH="$BASHX_UTILS_PATH"


### OS

export OS_IS_LINUX=false
export OS_IS_MAC=false
export OS_IS_MINGW=false

if [ "$(uname)" == "Darwin" ]; then
  defaults write org.R-project.R force.LANG en_US.UTF-8
  export TERM="xterm-color"
  export OS_IS_MAC=true
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  export OS_IS_LINUX=true
elif [[ "$(expr substr $(uname -s) 1 10)" == MINGW* ]]; then
  export OS_IS_MINGW=true
fi

## Is Linux OS?
readonly OS_IS_LINUX=$OS_IS_LINUX
## Is Mac OS?
readonly OS_IS_MAC=$OS_IS_MAC
## Is Win OS?
readonly OS_IS_MINGW=$OS_IS_MINGW

BASHX_BASE_SOURCE="${BASH_SOURCE[0]}"
while [ -h "$BASHX_BASE_SOURCE" ]; do
  BASHX_BASE_DIR="$(cd -P "$(dirname "$BASHX_BASE_SOURCE")" && pwd)"
  BASHX_BASE_SOURCE=`readlink "$BASHX_BASE_SOURCE"`
  [[ "$BASHX_BASE_SOURCE" != /* ]] && BASHX_BASE_SOURCE="$BASHX_BASE_DIR/$BASHX_BASE_SOURCE"
done
[ -z "$BASHX_BASE_DIR"] && BASHX_BASE_DIR="$(cd -P "$(dirname "$BASHX_BASE_SOURCE")" && pwd)"
export BASHX_BASE_SOURCE="$BASHX_BASE_SOURCE"
## BashX base source.
readonly BASHX_BASE_SOURCE="$BASHX_BASE_SOURCE"

export BASHX_BASE_DIR="$BASHX_BASE_DIR"
# BashX base path.
readonly BASHX_BASE_DIR="$BASHX_BASE_DIR"

# \e | \033 | \x1B
$OS_IS_MAC && export KEY_ESC=$'\x1B' || export KEY_ESC=$'\e'
## Key: ESC
readonly KEY_ESC="$KEY_ESC"

export ACTION_PREFIX='@Actions'
## Action prefix.
readonly ACTION_PREFIX="$ACTION_PREFIX"

# #############################################################################

### Configs

## Current script SRC path.
export SRC_PATH="$SCRIPT_DIR/$SCRIPT_FILE_NAME.src"

# Config file
if [ -z "$APP_CONFIG_FILE" ]; then
  # Default file
  APP_CONFIG_FILE="$SCRIPT_DIR/.$SCRIPT_FILE_NAME.env"
fi
## Configuration file.
export APP_CONFIG_FILE="$APP_CONFIG_FILE"

## APP Title.
export APP_TITLE="BashX"

## APP Version.
export APP_VERSION="1.0"

## Default APP color. See "@style" for more information.
export APP_COLOR_DEFAULT="cyan-light"

## Output colors?
export APP_COLORS_ENABLED=true

## Start character for formated print screen. See "@print" for more information.
export APP_PRINT_PREFIX="#"

## Default action to call. Action to use if script called without arguments.
export APP_DEFAULT_ACTION="help"

## Log file path.
export LOG_FILE_PATH="$SCRIPT_FULL_PATH.log"

## Tests path.
export TESTS_PATH="$SRC_PATH/tests"

## Actions path.
export ACTIONS_PATH="$SRC_PATH/actions"

## Utils path.
export UTILS_PATH="$SRC_PATH/utils"

## Resources path.
export RESOURCES_PATH="$SRC_PATH/resources"

# #############################################################################

### Load config

if [ -f "$APP_CONFIG_FILE" ]; then
  . $APP_CONFIG_FILE
fi

# #############################################################################

### VARS

## Current called action.
export ACTION=""

# #############################################################################

### PRIVATE VARS

# On exit command
export _ON_EXIT=''

# True if APP is terminated
export _APP_EXIT=false

# #############################################################################

# info out > std out
exec 3>&1

# #############################################################################

### Preload required

@trim() { . "$BASHX_UTILS_PATH/trim.sh"; }
@str-to-lower() { . "$BASHX_UTILS_PATH/str-to-lower.sh"; }
@style() { . "$BASHX_UTILS_PATH/style.sh"; }
@file-name() { . "$BASHX_UTILS_PATH/file-name.sh"; }

# #############################################################################

### Load

p='()'

# Load base utils
for __fn__path__ in $BASHX_UTILS_PATH/*.sh ; do
  if [ -f "$__fn__path__" ]; then
    # Create base util function
    eval "@$(@file-name "$__fn__path__" true)$p { . "$__fn__path__"; }"
  fi
done

# Load base actions
for __fn__path__ in $BASHX_ACTIONS_PATH/*.sh ; do
  if [ -f "$__fn__path__" ]; then
    # Create base action function
    eval "$ACTION_PREFIX.$(@file-name "$__fn__path__" true)$p { . "$__fn__path__"; }"
  fi
done

# Load custom utils
if [ -d "$UTILS_PATH" ]; then
  for __fn__path__ in $UTILS_PATH/*.sh ; do
    if [ -f "$__fn__path__" ]; then
      # Create util function
      eval "$(@file-name "$__fn__path__" true)$p { . "$__fn__path__"; }"
    fi
  done
fi

# Load custom actions
if [ -d "$ACTIONS_PATH" ]; then
  for __fn__path__ in $ACTIONS_PATH/*.sh ; do
    if [ -f "$__fn__path__" ]; then
      # Create action function
      eval "$ACTION_PREFIX.$(@file-name "$__fn__path__" true)$p { . "$__fn__path__"; }"
    fi
  done
fi

unset p
unset __fn__path__
